{"version":3,"sources":["logo.svg","components/header.jsx","firebase.js","components/contactList.jsx","components/editContact.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firebaseWithoutParenthesis","ContactList","useState","contacts","setContacts","showOrNot","confirmModal","setConfirmModal","okModal","setOkModal","useEffect","unsub","collection","orderBy","onSnapshot","snapshot","allContacts","docs","map","doc","id","data","confirmDelete","docId","title","desc","targetId","to","process","type","scope","contact","key","name","phone","onClick","bind","show","success","onConfirm","warning","showCancel","confirmBtnText","confirmBtnBsStyle","delete","then","catch","error","alert","onCancel","EditContact","match","fields","errors","form","setForm","errorModal","setErrorModal","params","isNewContact","validateInput","newErrors","isValid","length","handleChange","field","e","mFields","target","value","get","exists","contactData","window","location","href","htmlFor","disabled","placeholder","onChange","add","lastUpdated","FieldValue","serverTimestamp","set","danger","App","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.39646c07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport './header.css';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div className=\"fluid-container\">\r\n            <header className=\"App-header\">\r\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <h1>Phone Book<br /><span>React + FireStore</span></h1>\r\n                <p className=\"author\">Ow Yeong</p>\r\n            </header>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;\r\n","// src/firebase.js\r\n\r\n// Firebase App (the core Firebase SDK) is always required and must be listed first\r\nimport * as firebase from 'firebase/app';\r\n\r\n// Add the Firebase products that you want to use\r\nimport 'firebase/firestore';\r\n\r\n// TODO: Replace the following with your app's Firebase project configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBeP-OKURQn9w09xAwmTO7AWdiH9YCPHso\",\r\n    authDomain: \"react-phonebook-c1f3e.firebaseapp.com\",\r\n    databaseURL: \"https://react-phonebook-c1f3e.firebaseio.com\",\r\n    projectId: \"react-phonebook-c1f3e\",\r\n    storageBucket: \"react-phonebook-c1f3e.appspot.com\",\r\n    messagingSenderId: \"53683243345\",\r\n    appId: \"1:53683243345:web:44248474f13055c1e1eb70\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = firebase.firestore();\r\nexport const firebaseWithoutParenthesis = firebase.firestore;","import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport {Link} from 'react-router-dom';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nconst ContactList = () => {\r\n    //State define in functional component\r\n    const [contacts, setContacts] = useState([]); // update\r\n    const [confirmModal, setConfirmModal] = useState({showOrNot: false});\r\n    const [okModal, setOkModal] = useState({showOrNot: false});\r\n\r\n    //React hook that only run one, as the dependencies is empty\r\n    useEffect(() => {\r\n        const unsub = db.collection('contact').orderBy(\"lastUpdated\", \"desc\").onSnapshot(snapshot => {\r\n            const allContacts = snapshot.docs.map(doc => ({\r\n                id: doc.id,\r\n                ...doc.data()\r\n            }));\r\n            setContacts(allContacts);\r\n        });\r\n\r\n        return () => {\r\n            //clean up\r\n            unsub();\r\n        };\r\n\r\n    }, []);\r\n\r\n    //function: handler for delete contact in database, once user confirmed the action\r\n    const onConfirmDelete = (id) => {\r\n        //when confirm button in the confirm modal is click\r\n        \r\n        //hide the confirm modal\r\n        setConfirmModal({\r\n            showOrNot: false\r\n        })\r\n\r\n        //Delete action in firebase\r\n        db.collection(\"contact\").doc(id).delete().then(function() {\r\n            //success show info in modal, promise return\r\n            setOkModal({\r\n                showOrNot: true,\r\n                title: \"Successfully delete the contact\",\r\n                desc: \"Successfully delete the contact. You may see the changes instantly.\"\r\n            })\r\n\r\n        }).catch(function(error) {\r\n            //Error\r\n            alert(\"Some Error Occur when deleting contact. Please Try Again Later!.\")\r\n        });\r\n    };\r\n\r\n    const onCancelDelete = () => {\r\n        //when cancel button in the confirm modal is click\r\n        setConfirmModal({\r\n            showOrNot: false\r\n        })// hide the modal\r\n    };\r\n\r\n    //function: show confirmation modal for delete action\r\n    const confirmDelete = (docId) => {\r\n        setConfirmModal({\r\n            showOrNot: true,\r\n            title: \"Confirm Delete Contact?\",\r\n            desc: \"Click Yes to permenantly delete the contact. This action is could not be reverse.\",\r\n            targetId: docId\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>       \r\n            <div className=\"text-center\">\r\n                <Link to={process.env.PUBLIC_URL + \"/new\"}><button type=\"button\" className=\"w-50 m-4 btn btn-success clearfix\">Create New Contact</button></Link><br />\r\n                <table className=\"table text-left\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">ID</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">PhoneNumber</th>\r\n                            <th scope=\"col\">Action</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {contacts.map(contact => (\r\n                            <tr key={contact.id}>\r\n                                <th scope=\"row\">{contact.id}</th>\r\n                                <td>{contact.name}</td>\r\n                                <td>{contact.phone}</td>\r\n                                <td>\r\n                                    <Link to={`${process.env.PUBLIC_URL}/${contact.id}`}><button type=\"button\" className=\"btn btn-primary mr-2\">Edit</button></Link>\r\n                                    <button type=\"button\" onClick={confirmDelete.bind(this, contact.id)} className=\"btn btn-danger\">Delete</button>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>\r\n            \r\n            <SweetAlert show={okModal[\"showOrNot\"]} success title={okModal[\"title\"] || \"\"} onConfirm={() => setOkModal({showOrNot: false})} >\r\n                    {okModal[\"desc\"] || \"\"}\r\n            </SweetAlert>\r\n            <SweetAlert show={confirmModal[\"showOrNot\"]} warning showCancel confirmBtnText=\"Yes, delete it!\" confirmBtnBsStyle=\"danger\" title={confirmModal[\"title\"] || \"\"} onConfirm={onConfirmDelete.bind(this, confirmModal[\"targetId\"])} onCancel={onCancelDelete}>\r\n                {confirmModal[\"desc\"] || \"\"}\r\n            </SweetAlert>\r\n        </div>\r\n        \r\n    );\r\n\r\n}\r\n\r\nexport default ContactList;","import React, { useState, useEffect } from 'react';\r\nimport { db, firebaseWithoutParenthesis } from '../firebase';\r\nimport { Link } from 'react-router-dom';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\n\r\nconst EditContact = ({ match }) => {\r\n    //State define in functional component\r\n    const [form, setForm] = useState({\r\n        fields: {},\r\n        errors: {}\r\n    });\r\n    const [okModal, setOkModal] = useState({ showOrNot: false });\r\n    const [errorModal, setErrorModal] = useState({ showOrNot: false });\r\n\r\n    const docId = match.params.id;\r\n    //This editContact component is reusable for create and update contact.\r\n    var isNewContact = (docId === \"new\") ? true : false;//Indicate if create or update by the url params\r\n\r\n    //function: fetch data with docId for existing contact editing\r\n    const fetchDataFromFirestore = () => {\r\n        if (isNewContact === false) {\r\n            //firestore get doc\r\n            db.collection('contact').doc(docId).get()\r\n                .then(doc => {\r\n                    if (doc.exists) {\r\n                         //if valid, update the data in form state\r\n                        const contactData = { id: doc.id, ...doc.data() }\r\n                        setForm({\r\n                            ...form,\r\n                            fields: contactData\r\n                        });\r\n\r\n\r\n                    } else {\r\n                        //if invalid\r\n                        if (!isNewContact) {\r\n                            //If doc ID provided does not exist in fire store, redirect user to new contact page\r\n                            window.location.href = \"/new\";\r\n                            \r\n                        }\r\n                    }\r\n                    \r\n                })\r\n                .catch(() => {\r\n                   //Error\r\n                });\r\n        }\r\n\r\n    }\r\n  \r\n    //function: Validate input in the form, show error if necassary.\r\n    const validateInput = () => {\r\n        let fields = form.fields;\r\n        let newErrors = {};\r\n        let isValid = true;\r\n\r\n        //Name\r\n        if (!fields[\"name\"]) {\r\n            isValid = false;\r\n            newErrors[\"name\"] = \"Name Cannot be empty\";\r\n        }\r\n\r\n        if (!!fields[\"name\"]) {\r\n            if(fields[\"name\"].length > 50) {\r\n                isValid = false;\r\n                newErrors[\"name\"] = \"Maximum character allow for name is 50\";\r\n            }\r\n\r\n            if (!fields[\"name\"].match(/^[a-zA-Z ()]+$/)) {\r\n                isValid = false;\r\n                newErrors[\"name\"] = \"Name can only letters and symbol( -, +, (, ) )\";\r\n            }\r\n        }\r\n\r\n        //phone\r\n        if (!fields[\"phone\"]) {\r\n            isValid = false;\r\n            newErrors[\"phone\"] = \"Phone Cannot be empty\";\r\n        }\r\n\r\n        if (!!fields[\"phone\"]) {\r\n            if(fields[\"phone\"].length > 15) {\r\n                isValid = false;\r\n                newErrors[\"phone\"] = \"Maximum character allow for phone is 15\";\r\n            }\r\n\r\n            if (!fields[\"phone\"].match(/^[0-9\\-+]+$/)) {\r\n                isValid = false;\r\n                newErrors[\"phone\"] = \"Only number, + or -\";\r\n            }\r\n        }\r\n        \r\n        //update the form state with error message to show changes\r\n        setForm({\r\n            ...form,\r\n            errors: newErrors\r\n        });\r\n        \r\n        return isValid;\r\n    }\r\n\r\n    //function: Handle change for field in the form, this function is called everytime value change\r\n    const handleChange = (field, e) => {\r\n        let mFields = form.fields;\r\n        mFields[field] = e.target.value;\r\n        //update the form state to show changes\r\n        setForm({\r\n            ...form,\r\n            fields: mFields\r\n        });\r\n        validateInput();\r\n\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n\r\n        if (validateInput()) {\r\n            if (!isNewContact) {\r\n                //Existing contact in database\r\n                db.collection(\"contact\").doc(docId).set({\r\n                        ...form.fields,\r\n                        lastUpdated: firebaseWithoutParenthesis.FieldValue.serverTimestamp()\r\n                    }).then(function () {\r\n                        setOkModal({\r\n                            showOrNot: true,\r\n                            title: \"Successfully Updated the contact\",\r\n                            desc: \"Successfully Updated the contact into the database. You may see the changes instantly.\"\r\n                        })\r\n                    })\r\n                    .catch(function (error) {\r\n                        setErrorModal({\r\n                            showOrNot: true,\r\n                            title: \"Error!\",\r\n                            desc: \"Some error occur please try again later.\"\r\n                        });\r\n                    });\r\n            } else {\r\n                //create new contact in database\r\n                db.collection(\"contact\").add({\r\n                        ...form.fields,\r\n                        lastUpdated: firebaseWithoutParenthesis.FieldValue.serverTimestamp()\r\n                    }).then(function () {\r\n                        setOkModal({\r\n                            showOrNot: true,\r\n                            title: \"Successfully Created the contact\",\r\n                            desc: \"Successfully Created the contact into the database. You may see the changes instantly.\"\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                        setErrorModal({\r\n                            showOrNot: true,\r\n                            title: \"Error!\",\r\n                            desc: \"Some error occur please try again later.\"\r\n                        });\r\n                    });\r\n            }\r\n\r\n        } else {\r\n            setErrorModal({\r\n                showOrNot: true,\r\n                title: \"Error!\",\r\n                desc: \"Form contains error. Please amend it based on the instruction provided.\"\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    //React hook that only run one, as the dependencies is empty\r\n    useEffect(() => {\r\n        fetchDataFromFirestore();\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container text-center\">\r\n                <h2 className=\"my-3\" >{isNewContact ? \"New Contact\" : \"Edit Contact\"}</h2>\r\n                <form>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"id\">Id</label>\r\n                        <input disabled type=\"text\" className=\"form-control\" id=\"exampleFormControlInput1\" placeholder=\"id\" value={form[\"fields\"][\"id\"] || \"\"} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleFormControlInput1\">Contact Name</label>\r\n                        <input className=\"form-control\" placeholder=\"Name\" type=\"text\" onChange={handleChange.bind(this, \"name\")} value={form[\"fields\"][\"name\"] || \"\"} />\r\n                        <div className=\"invalid-feedback d-block text-left\">{form[\"errors\"][\"name\"] || \"\"}</div>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleFormControlInput1\">Contact Phone</label>\r\n                        <input type=\"text\" className=\"form-control\" onChange={handleChange.bind(this, \"phone\")} placeholder=\"xxx-xxxxxxx\" value={form[\"fields\"][\"phone\"] || \"\"} />\r\n                        <div className=\"invalid-feedback d-block text-left\">{form[\"errors\"][\"phone\"] || \"\"}</div>\r\n                    </div>\r\n                </form>\r\n                <button onClick={handleSubmit} className=\"btn btn-success mr-2\">{isNewContact ? \"Create New Contact\" : \"Edit Contact\"}</button>\r\n                <Link to={process.env.PUBLIC_URL}><button className=\"btn btn-secondary\">Cancel</button></Link>\r\n            </div>\r\n            <SweetAlert show={okModal[\"showOrNot\"]} success title={okModal[\"title\"] || \"\"} onConfirm={() => { window.location.href = \"/\" }} >\r\n                {okModal[\"desc\"] || \"\"}\r\n            </SweetAlert>\r\n            <SweetAlert show={errorModal[\"showOrNot\"]} danger title={errorModal[\"title\"] || \"\"} onConfirm={()=>{setErrorModal({ showOrNot: false })}}>\r\n                {errorModal[\"desc\"] || \"\"}\r\n            </SweetAlert>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default EditContact;","import React from 'react';\nimport Header from './components/header';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport ContactList from './components/contactList';\nimport EditContact from './components/editContact';\n\nfunction App() {\n\n\n  return (\n    <Router>\n      <div>\n        <Header />\n        <Switch>\n          <Route path={\"/\"} exact component={ContactList} />\n          <Route path={process.env.PUBLIC_URL + \"/:id\"}component={EditContact} />\n        </Switch>\n      </div>\n    </Router>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}